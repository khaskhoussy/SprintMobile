package com.codename1.main;

import Entity.User;
import com.codename1.components.FloatingHint;
import com.codename1.components.InfiniteProgress;
import com.codename1.io.ConnectionRequest;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.io.Storage;
import com.codename1.ui.Toolbar;
import com.codename1.social.FacebookConnect;
import com.codename1.social.Login;
import com.codename1.social.LoginCallback;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import controller.Beblio;
import controller.CommandeController;
import controller.EvenementController;
import controller.Forum;
import controller.HomeForm;
import controller.MapsDemo;
import controller.PackDecorationController;
import controller.PanierController;
import controller.ProfilController;
import controller.ServicesController;
import controller.SignUpController;


import controller.ajouter_compteController;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import service.UserService;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MainView {

    private Form current;
    private Resources theme;
    private Form f;
    private TextField username;
    private TextField password;
    private Button connecter;
    private Button SignUp;
    private Button Facebook;
    private Button Forget_Password;
    public static final String ACCOUNT_SID = "AC460f6530f76bdcf2d00aa6e381c60729";
    public static final String AUTH_TOKEN = "9052328174de97c9bf3f269679795c54";
    int i = 0;

    public void init(Object context) {        
        Toolbar.setGlobalToolbar(true);
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");
        Controller.theme = theme;
        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();

        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn");

        f.add(new Label(theme.getImage("Logo.png"), "LogoLabel"));

        TextField username = new TextField("", "Username", 20, TextField.ANY);
        TextField password = new TextField("", "Password", 20, TextField.PASSWORD);
        username.setSingleLineTextArea(false);
        password.setSingleLineTextArea(false);
        Button signIn = new Button("Sign In");
        Button signUp = new Button("Sign Up");
        Button forget_password = new Button("Forgot password ?");
        //Button LoginFacebook = new Button("Login Facebook");

        signUp.setUIID("Link");
        Label doneHaveAnAccount = new Label("Don't have an account?");
           Button signUp1 = new Button("Sign Up Vie Web");
        Container content = BoxLayout.encloseY(
                new FloatingHint(username),
                new BaseForm().createLineSeparator(),
                new FloatingHint(password),
                new BaseForm().createLineSeparator(),
                signIn,
                FlowLayout.encloseCenter(doneHaveAnAccount, signUp, forget_password)
        );

        signUp1.addActionListener(e -> {
        });

        forget_password.addActionListener(e -> {
            forgotPassword();
        });

        /*LoginFacebook.addActionListener(e -> {
            fb();
        });*/
        signIn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Session sessions = Session.getInstance();
                sessions.setParameters(username.getText(), password.getText());
                if (sessions.initSession()) {
                    initMainView();
                } else {
                    Dialog.show("Error!", "Login ou mot de passe incorrect!", "Ok", null);
                }
            }
        });

        signUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                Form mainForm = new Form();
                mainForm.setLayout(new BorderLayout());
                mainForm.getToolbar().setHidden(true);
                mainForm.getContentPane().removeAll();
                SignUpController forumController = new SignUpController();
                forumController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, forumController.getView());
                mainForm.revalidate();
                mainForm.show();
      
            }
        });

        content.setScrollableY(true);
        f.add(content);
        signIn.requestFocus();
        signIn.addActionListener(e -> {
        });
        f.revalidate();
        f.show();
    }

    public void forgotPassword() {

        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();

        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn");

        f.add(new Label(theme.getImage("Logo.png"), "LogoLabel"));

        TextField email = new TextField("", "Email", 20, TextField.ANY);
        email.setSingleLineTextArea(false);

        Button signIn = new Button("Sign In");

        Container content = BoxLayout.encloseY(
                new FloatingHint(email),
                new BaseForm().createLineSeparator(),
                new BaseForm().createLineSeparator(),
                signIn,
                FlowLayout.encloseCenter()
        );
        f.add(content);

        signIn.addActionListener(e -> {
            if (email.getText().isEmpty()) {
                Dialog.show("Error", "Email est vide ", "Ok", null);

            } else {
                Beblio.setMail(email.getText());

            }
        });
        f.show();

    }

    private void initMainView() {

        User user = UserService.getProfilUser();
        //----------------------------------------------------------------------------------------
        theme = UIManager.initFirstTheme("/theme");
        Form mainForm = new Form();
        mainForm.setLayout(new BorderLayout());
        final Command profileCommand = new Command("Mon Profil") {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ProfilController profilController = new ProfilController();
                profilController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, profilController.getView());
                mainForm.revalidate();
            }
        };

        Image img = ProfilController.getRoundImage(ProfilController.getImageFromURL(user.getImage()));
        mainForm.addCommand(new Command("", img));
        mainForm.addCommand(profileCommand);

        Command c = new Command("Modules");
        Label l = new Label("Acceder à") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l.setUIID("Separator");
        c.putClientProperty("SideComponent", l);
        mainForm.addCommand(c);

        mainForm.addCommand(new Command("Pack décoration", theme.getImage("all friends.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                PackDecorationController packDecorationController = new PackDecorationController();
                packDecorationController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, packDecorationController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Boutique", theme.getImage("friend feeds.png")) {

            @Override
            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                HomeForm homeForm = new HomeForm(theme);
                mainForm.addComponent(BorderLayout.CENTER, homeForm);
                mainForm.revalidate();
            }
        });
        
        mainForm.addCommand(new Command("Map", theme.getImage("wall post.png")) {
            
           

            @Override
            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                MapsDemo m = new MapsDemo();
                

            }
        });

        mainForm.addCommand(new Command("Evenement", theme.getImage("all friends.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                EvenementController evenementController = new EvenementController();
                evenementController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, evenementController.getView());
                mainForm.revalidate();
            }
        });

       final Command servicesCommand = new Command("Services") {


            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ServicesController servicesController = new ServicesController();
                servicesController.initialize();  
                mainForm.addComponent(BorderLayout.CENTER, servicesController.getView());
                mainForm.revalidate();
            }
        };
       final Command forum = new Command("Forum") {


            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                Forum servicesController = new Forum();
                servicesController.initialize();  
                mainForm.addComponent(BorderLayout.CENTER, servicesController.getView());
                mainForm.revalidate();
            }
        };

        mainForm.addCommand(servicesCommand); 
        mainForm.addCommand(forum); 
        
        mainForm.addCommand(new Command("Mon Panier", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                PanierController panierController = new PanierController();
                panierController.initialize();  
                mainForm.addComponent(BorderLayout.CENTER, panierController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Mes Commandes", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                
                mainForm.getContentPane().removeAll();
                CommandeController commandeController = new CommandeController();
                commandeController.initialize();  
                mainForm.addComponent(BorderLayout.CENTER, commandeController.getView());
                mainForm.revalidate();

            }
        });

        mainForm.addCommand(new Command("Logout") {

            public void actionPerformed(ActionEvent evt) {

            }
        });

        mainForm.addCommand(new Command("Quitter") {

            public void actionPerformed(ActionEvent evt) {
                Display.getInstance().exitApplication();
            }
        });

        mainForm.show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {

    }

    private Component showMyProfile() {
        final Container c = new Container(new BorderLayout());
        BorderLayout bl = new BorderLayout();
        bl.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        Container p = new Container(bl);
        p.addComponent(BorderLayout.CENTER, new InfiniteProgress());

        c.addComponent(BorderLayout.CENTER, p);

        return c;
    }

    private void fb() {

        String clientId = "132361634176800";
        String redirectURI = "https://google.com/";
        String clientSecret = "0645e3d4e66ec171e7aaf53bde14b011";
        Login fb = FacebookConnect.getInstance();
        fb.setClientId(clientId);
        fb.setRedirectURI(redirectURI);
        fb.setClientSecret(clientSecret);
        //Sets a LoginCallback listener
        fb.setCallback(new LoginCallback() {
            @Override
            public void loginFailed(String errorMessage) {
                System.out.println("Login Failed");
                Storage.getInstance().writeObject("token", "");
            }

            @Override
            public void loginSuccessful() {
                System.out.println("Login Succed");
                String token = fb.getAccessToken().getToken();
                Storage.getInstance().writeObject("token", token);
            }

        });
        //trigger the login if not already logged in
        if (!fb.isUserLoggedIn()) {

            fb.doLogin();
            ajouter_compteController forumController = new ajouter_compteController();
            forumController.add_user1("Karim", "karim.m1010", "Karim", "Karim.m95@live.fr", "karim");

        } else {

            //get the token and now you can query the facebook API
            String token = fb.getAccessToken().getToken();
            Storage.getInstance().writeObject("token", token);
        }
        String token = (String) Storage.getInstance().readObject("token");
        if (token != null) {
            initMainView();
        }

    }

}
